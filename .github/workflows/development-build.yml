name: Development Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        runtime: [win-x64, osx-x64, osx-arm64, linux-x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0'

      - name: Publish DocumentBuilder.Pdf for Multiple Runtimes
        run: |
          echo "Publishing DocumentBuilder.Pdf project for multiple runtimes..."
      
          # Define the runtime identifiers
          RUNTIMES=("linux-x64" "linux-arm64" "win-x64" "win-arm64" "osx-x64" "osx-arm64")
      
          for RID in "${RUNTIMES[@]}"
          do
            echo "Packing for runtime: $RID"
            dotnet pack ./DocumentBuilder.Pdf/DocumentBuilder.Pdf.csproj -c Release -p:RuntimeIdentifier=$RID --output ./publish/DocumentBuilder.Pdf/$RID
          done
      
          echo "Contents of ./publish/DocumentBuilder.Pdf:"
          ls -R ./publish/DocumentBuilder.Pdf

      - name: Restore dependencies
        run: dotnet restore

      - name: Build for ${{ matrix.runtime }}
        run: |
          echo "Publishing for runtime: ${{ matrix.runtime }}"
          dotnet publish ./DocumentBuilder/DocumentBuilder.csproj -c Release -r ${{ matrix.runtime }} --self-contained true \
              -p:PublishSingleFile=true \
              -p:IncludeAllContentForSelfExtract=true \
              -p:EnableCompressionInSingleFile=true \
              -o ./publish/${{ matrix.runtime }}

          # Rename the output binary to include the runtime and a "latest" tag
          if [ "${{ matrix.runtime }}" == "win-x64" ]; then
              mv ./publish/${{ matrix.runtime }}/DocumentBuilder.exe ./publish/${{ matrix.runtime }}/document-builder-latest-${{ matrix.runtime }}.exe
          else
              mv ./publish/${{ matrix.runtime }}/DocumentBuilder ./publish/${{ matrix.runtime }}/document-builder-latest-${{ matrix.runtime }}
          fi

          echo "Contents of ./publish/${{ matrix.runtime }}:"
          ls -R ./publish/${{ matrix.runtime }}

      - name: Ensure Publish Directory Exists
        run: |
          if [ ! -d "./publish/${{ matrix.runtime }}" ]; then
            echo "Error: Publish directory for ${{ matrix.runtime }} not found!"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: development-build-${{ matrix.runtime }}
          path: ./publish/${{ matrix.runtime }}

  update-development-release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Publish Directory
        run: |
          echo "Contents of ./publish:"
          ls -R ./publish/

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            $(find ./publish -type f -name "document-builder-latest-*")
          tag_name: latest-development
          name: "Latest Development Build"
          body: |
            ## Latest Development Build
            - Auto-generated from the latest commit to the `main` branch.
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}